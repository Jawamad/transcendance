services:
  waf:
    networks:
      - app_network
    image: owasp/modsecurity-crs:nginx-alpine
    container_name: waf
    ports:
      - "80:80"
    restart: always
    volumes:
    # fichier reverse-proxy Nginx
    - ./infra/reverse-proxy/custom.conf:/etc/nginx/conf.d/custom.conf

     # Dossier frontend build√©
    - ./frontend/dist:/usr/share/nginx/html

    #fichier de config ModSecurity
    - ./infra/reverse-proxy/modsecurity.conf:/etc/nginx/modsecurity.conf

    # certificats SSL
    # - ./infra/reverse-proxy/certs:/etc/ssl/certs
    depends_on:
    - backend

  dbwriter:
    build:
      context: ./infra/dbwriter
      dockerfile: Dockerfile
    container_name: dbwriter
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:/app/data/database.sqlite
    volumes:
      - sqlite_data:/app/data
    networks:
      - app_network
    # ports:
    #  - "4000:4000" # test


  backend:
    networks:
      - app_network
    build:
      context: .
      dockerfile: infra/backend/Dockerfile
    container_name: backend
    ports:
      - "3000:3000"
    volumes:
      - sqlite_data:/app/data:ro 
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:/app/data/database.sqlite

  frontend:
    build:
      context: .
      dockerfile: infra/frontend/Dockerfile
    container_name: frontend
    environment:
      - NODE_ENV=production
    command: npm run build
    volumes:
      - ./frontend/dist:/app/frontend/dist


  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
    command: server -dev -dev-root-token-id="root"
    restart: always
    networks:
      - app_network

volumes:
  sqlite_data:

networks:
  app_network:
    driver: bridge

