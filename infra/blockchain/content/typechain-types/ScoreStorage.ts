/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ScoreStorageInterface extends utils.Interface {
  functions: {
    "getScore(address)": FunctionFragment;
    "storeScore(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getScore" | "storeScore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeScore", data: BytesLike): Result;

  events: {
    "ScoreSaved(address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScoreSaved"): EventFragment;
}

export interface ScoreSavedEventObject {
  player: string;
  playerName: string;
  score: BigNumber;
}
export type ScoreSavedEvent = TypedEvent<
  [string, string, BigNumber],
  ScoreSavedEventObject
>;

export type ScoreSavedEventFilter = TypedEventFilter<ScoreSavedEvent>;

export interface ScoreStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ScoreStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    storeScore(
      _playerName: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getScore(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  storeScore(
    _playerName: PromiseOrValue<string>,
    _score: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    storeScore(
      _playerName: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ScoreSaved(address,string,uint256)"(
      player?: PromiseOrValue<string> | null,
      playerName?: null,
      score?: null
    ): ScoreSavedEventFilter;
    ScoreSaved(
      player?: PromiseOrValue<string> | null,
      playerName?: null,
      score?: null
    ): ScoreSavedEventFilter;
  };

  estimateGas: {
    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeScore(
      _playerName: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeScore(
      _playerName: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
