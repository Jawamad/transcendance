services:
  waf:
    networks:
      - app_network
    image: owasp/modsecurity-crs:nginx-alpine
    container_name: waf
    ports:
      - "80:80"   # ton site sera dispo sur http://localhost:8080
    restart: always
    volumes:
    # ton fichier reverse-proxy Nginx (Solution A : conf.d)
    - ./infra/reverse-proxy/custom.conf:/etc/nginx/conf.d/custom.conf

     # Dossier frontend buildé
    - ./frontend/dist:/usr/share/nginx/html

    # ton fichier de config ModSecurity
    - ./infra/reverse-proxy/modsecurity.conf:/etc/nginx/modsecurity.conf

    # certificats SSL
    # - ./infra/reverse-proxy/certs:/etc/ssl/certs
    depends_on:
    - backend

  backend:
    networks:
      - app_network
    build:
      context: .
      dockerfile: infra/backend/Dockerfile
    container_name: backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
  # Ne pas monter ./backend/src en prod pour éviter d'écraser dist/

  frontend:
    build:
      context: .
      dockerfile: infra/frontend/Dockerfile
    container_name: frontend
    # Pas de port exposé, c'est un build
    environment:
      - NODE_ENV=production
    # On ne lance pas de serveur, juste un build
    command: npm run build
    volumes:
      # Permet de récupérer le build dans ./frontend/dist pour que waf serve les fichiers
      - ./frontend/dist:/app/frontend/dist

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
    command: server -dev -dev-root-token-id="root"
    restart: always
    networks:
      - app_network
    volumes:
      backend_data:
    networks:
      app_network:
        driver: bridge

  blockchain:
    image: node:20-alpine
    build:
      context: ./infra/blockchain
      dockerfile: Dockerfile
    container_name: blockchain
    ports:
      - "8545:8545"
    volumes:
      - ./infra/blockchain:/app
    networks:
      - app_network
    command: npx hardhat node


  # hardhat_node:
  #   build: .
  #   volumes:
  #     - .:/app
  #   working_dir: /app
  #   command: npx hardhat node

  # blockchain:
  #   image: node:20-alpine
  #   container_name: blockchain
  #   working_dir: /app 
  #   volumes:
  #     - ./infra/blockchain:/app
  #   ports:
  #     - "8545:8545"
  #   command: sh -c "npm install && npx hardhat node"
  #   networks:
  #     - app_network
    
    

